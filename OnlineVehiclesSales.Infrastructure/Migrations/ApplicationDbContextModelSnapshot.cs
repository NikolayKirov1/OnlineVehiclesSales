// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineVehiclesSales.Infrastructure.Data;

#nullable disable

namespace OnlineVehiclesSales.Infrastructure.Migrations
{
    [DbContext(typeof(OnlineVehiclesSalesDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ff2a8cd-fbbd-417b-91ce-18291b88e482",
                            Email = "seller@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "seller@mail.com",
                            NormalizedUserName = "seller@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELNy//kFw24/BiWKPiaxD9A0Vamb/d6lkKNUTDZog3pakudxOnEs2LKmVdkEVwR0rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc17bb10-3ccd-4e13-8128-d4550d12f91c",
                            TwoFactorEnabled = false,
                            UserName = "seller@mail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eba48d96-9f93-4288-9c42-1931e7401953",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAMguUfkcvKq8ssRR1aMlqZyEm6O8gSiYzrjG0BNAAqjpJZ2uM7pqOmtr1HKYW1hWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "442cbe7b-3256-49a0-9b25-8ceaaa0cd5d4",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Car identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Brand of the car");

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User id of the buyer of the car");

                    b.Property<int>("CarCategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier of the car");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Color of the car");

                    b.Property<DateTime>("DateAd")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the ad");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Car description");

                    b.Property<int>("FuelId")
                        .HasColumnType("int")
                        .HasComment("Fuel identifier of the car");

                    b.Property<int>("GearsTypeId")
                        .HasColumnType("int")
                        .HasComment("Type of gears identifier of the car");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int")
                        .HasComment("Horsepower of the car");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Car image url");

                    b.Property<int>("Mileage")
                        .HasColumnType("int")
                        .HasComment("Mileage of the car");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Model of the car");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Price of the car");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasComment("Seller identifier of the car");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Year of manufacture of the car");

                    b.HasKey("Id");

                    b.HasIndex("CarCategoryId");

                    b.HasIndex("FuelId");

                    b.HasIndex("GearsTypeId");

                    b.HasIndex("SellerId");

                    b.ToTable("Cars");

                    b.HasComment("Car to sell");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Opel",
                            BuyerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            CarCategoryId = 8,
                            Color = "Black metallic",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 18, 567, DateTimeKind.Local).AddTicks(6763),
                            Description = "The car is in very good condition.",
                            FuelId = 2,
                            GearsTypeId = 1,
                            Horsepower = 136,
                            ImageUrl = "http://localhost:5001/images/cars/OpelZafira.jpg",
                            Mileage = 208260,
                            Model = "Zafira 1.9cdti",
                            Price = 13999,
                            SellerId = 1,
                            Year = 2016
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Audi",
                            CarCategoryId = 3,
                            Color = "Gray metallic",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 18, 567, DateTimeKind.Local).AddTicks(6826),
                            Description = "The car is in good condition and has tons of extras.",
                            FuelId = 2,
                            GearsTypeId = 1,
                            Horsepower = 150,
                            ImageUrl = "http://localhost:5001/images/cars/AudiA4.jpg",
                            Mileage = 192000,
                            Model = "A4 2.0TDI",
                            Price = 18900,
                            SellerId = 1,
                            Year = 2013
                        },
                        new
                        {
                            Id = 3,
                            Brand = "BMW",
                            CarCategoryId = 1,
                            Color = "Blue",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 18, 567, DateTimeKind.Local).AddTicks(6836),
                            Description = "The car is in good condition.",
                            FuelId = 3,
                            GearsTypeId = 1,
                            Horsepower = 118,
                            ImageUrl = "http://localhost:5001/images/cars/BMW318.jpg",
                            Mileage = 330000,
                            Model = "318 1.8i",
                            Price = 4000,
                            SellerId = 1,
                            Year = 1998
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.CarCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Car category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Car category name");

                    b.HasKey("Id");

                    b.ToTable("CarCategories");

                    b.HasComment("Car category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Station wagon"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Convertible"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jeep"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pickup"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Van"
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Fuel identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Fuel name");

                    b.HasKey("Id");

                    b.ToTable("Fuels");

                    b.HasComment("Type of fuel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gasoline"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gas/Gasoline"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Methane/Gasoline"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hybrid"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Electricity"
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.GearsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Type identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Name of type of gears");

                    b.HasKey("Id");

                    b.ToTable("GearsTypes");

                    b.HasComment("Type of gears");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Automatic"
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Motorcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Motorcycle identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Brand of the motorcycle");

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User id of the buyer of the motorcycle");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Color of the motorcycle");

                    b.Property<DateTime>("DateAd")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the ad");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Motorcycle description");

                    b.Property<int>("FuelId")
                        .HasColumnType("int")
                        .HasComment("Fuel identifier of the motorcycle");

                    b.Property<int>("GearsTypeId")
                        .HasColumnType("int")
                        .HasComment("Type of gears identifier of the motorcycle");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int")
                        .HasComment("Horsepower of the motorcycle");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Motorcycle image url");

                    b.Property<int>("Mileage")
                        .HasColumnType("int")
                        .HasComment("Mileage of the motorcycle");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Model of the motorcycle");

                    b.Property<int>("MotorcycleCategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier of the motorcycle");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Price of the motorcycle");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasComment("Seller identifier of the motorcycle");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Year of manufacture of the motorcycle");

                    b.HasKey("Id");

                    b.HasIndex("FuelId");

                    b.HasIndex("GearsTypeId");

                    b.HasIndex("MotorcycleCategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Motorcycles");

                    b.HasComment("Motorcycle to sell");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Harley Davidson",
                            BuyerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Color = "Black",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 18, 782, DateTimeKind.Local).AddTicks(4719),
                            Description = "Import USA. Immaculate condition. All paid with registration.",
                            FuelId = 1,
                            GearsTypeId = 1,
                            Horsepower = 121,
                            ImageUrl = "http://localhost:5001/images/motorcycles/HarleyDavidson.jpg",
                            Mileage = 30000,
                            Model = "Road King 128",
                            MotorcycleCategoryId = 9,
                            Price = 25000,
                            SellerId = 1,
                            Year = 2019
                        },
                        new
                        {
                            Id = 2,
                            Brand = "BMW",
                            Color = "White",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 18, 782, DateTimeKind.Local).AddTicks(4738),
                            Description = "The bike is in good general condition. Needs service.",
                            FuelId = 1,
                            GearsTypeId = 1,
                            Horsepower = 48,
                            ImageUrl = "http://localhost:5001/images/motorcycles/BmwF650ST.jpg",
                            Mileage = 51000,
                            Model = "F650 ST",
                            MotorcycleCategoryId = 8,
                            Price = 2099,
                            SellerId = 1,
                            Year = 1996
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Honda",
                            Color = "Blue/Red",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 18, 782, DateTimeKind.Local).AddTicks(4747),
                            Description = "New import with all registration documents available, sale with contract without notary fees!",
                            FuelId = 1,
                            GearsTypeId = 1,
                            Horsepower = 106,
                            ImageUrl = "http://localhost:5001/images/motorcycles/HondaCBR600.jpg",
                            Mileage = 76600,
                            Model = "CBR 600",
                            MotorcycleCategoryId = 6,
                            Price = 3699,
                            SellerId = 1,
                            Year = 2002
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.MotorcycleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Motorcycle category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Motorcycle category name");

                    b.HasKey("Id");

                    b.ToTable("MotorcycleCategories");

                    b.HasComment("Motorcycle category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ATV"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Buggy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Enduro"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Snowmobile"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dirt bike"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Track bike"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Scooter"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Tourer"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Chopper"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Super motto"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Karting"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Tricycle"
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Seller identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Seller's phone");

                    b.Property<int>("TypeSellerId")
                        .HasColumnType("int")
                        .HasComment("Type identifier of the seller");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeSellerId");

                    b.HasIndex("UserId");

                    b.ToTable("Sellers");

                    b.HasComment("Vehicle seller");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhoneNumber = "+359888888888",
                            TypeSellerId = 1,
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Truck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Truck identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Brand of the truck");

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User id of the buyer of the truck");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Color of the truck");

                    b.Property<DateTime>("DateAd")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the ad");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Truck description");

                    b.Property<int>("FuelId")
                        .HasColumnType("int")
                        .HasComment("Fuel identifier of the truck");

                    b.Property<int>("GearsTypeId")
                        .HasColumnType("int")
                        .HasComment("Type of gears identifier of the truck");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int")
                        .HasComment("Horsepower of the truck");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Truck image url");

                    b.Property<int>("Mileage")
                        .HasColumnType("int")
                        .HasComment("Mileage of the truck");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Model of the truck");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Price of the truck");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasComment("Seller identifier of the truck");

                    b.Property<int>("TruckCategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier of the truck");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Year of manufacture of the truck");

                    b.HasKey("Id");

                    b.HasIndex("FuelId");

                    b.HasIndex("GearsTypeId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TruckCategoryId");

                    b.ToTable("Trucks");

                    b.HasComment("Truck to sell");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Man",
                            BuyerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Color = "White",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 18, 939, DateTimeKind.Local).AddTicks(1161),
                            Description = "At 50,000 km after overhaul. The truck has exterior marks.",
                            FuelId = 2,
                            GearsTypeId = 1,
                            Horsepower = 530,
                            ImageUrl = "http://localhost:5001/images/trucks/ManTGA18.530.jpg",
                            Mileage = 759519,
                            Model = "TGA 18.530",
                            Price = 50000,
                            SellerId = 1,
                            TruckCategoryId = 3,
                            Year = 1998
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Scania",
                            Color = "Red",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 18, 939, DateTimeKind.Local).AddTicks(1172),
                            Description = "Full service history, excellent technical condition, new fuel pump, serviced 30,000 km ago.",
                            FuelId = 2,
                            GearsTypeId = 2,
                            Horsepower = 410,
                            ImageUrl = "http://localhost:5001/images/trucks/ScaniaR410HighlineMega.jpg",
                            Mileage = 982941,
                            Model = "R410 Highline Mega",
                            Price = 43750,
                            SellerId = 1,
                            TruckCategoryId = 3,
                            Year = 2015
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Iveco",
                            Color = "White",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 18, 939, DateTimeKind.Local).AddTicks(1181),
                            Description = "Newly imported, the truck has a 2-meter crane, lifts 1.5 tons of 6,500 kilos and a 10-ton hydraulic winch.",
                            FuelId = 2,
                            GearsTypeId = 1,
                            Horsepower = 150,
                            ImageUrl = "http://localhost:5001/images/trucks/Iveco80e154.0TD.jpg",
                            Mileage = 362500,
                            Model = "80e15 4.0 TD",
                            Price = 12999,
                            SellerId = 1,
                            TruckCategoryId = 4,
                            Year = 1995
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.TruckCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Truck category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Truck category name");

                    b.HasKey("Id");

                    b.ToTable("TruckCategories");

                    b.HasComment("Truck category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Car transporter"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fatbed truck"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tugboat"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Crane"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Multilift"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dump truck"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Wagon"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cistern"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Trailer"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Garbage truck"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hanger truck"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Refrigerator truck"
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.TypeSeller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Tipe seller identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Type seller name");

                    b.HasKey("Id");

                    b.ToTable("TypeSellers");

                    b.HasComment("Type seller");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Private person"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Company"
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Van", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Van identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Brand of the van");

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User id of the buyer of the van");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Color of the van");

                    b.Property<DateTime>("DateAd")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the ad");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Van description");

                    b.Property<int>("FuelId")
                        .HasColumnType("int")
                        .HasComment("Fuel identifier of the van");

                    b.Property<int>("GearsTypeId")
                        .HasColumnType("int")
                        .HasComment("Type of gears identifier of the van");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int")
                        .HasComment("Horsepower of the van");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Van image url");

                    b.Property<int>("Mileage")
                        .HasColumnType("int")
                        .HasComment("Mileage of the van");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Model of the van");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Price of the van");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasComment("Seller identifier of the van");

                    b.Property<int>("VanCategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier of the van");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Year of manufacture of the van");

                    b.HasKey("Id");

                    b.HasIndex("FuelId");

                    b.HasIndex("GearsTypeId");

                    b.HasIndex("SellerId");

                    b.HasIndex("VanCategoryId");

                    b.ToTable("Vans");

                    b.HasComment("Van to sell");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Mercedes-Benz",
                            BuyerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Color = "Yellow metallic",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 19, 165, DateTimeKind.Local).AddTicks(8833),
                            Description = "New importation!!! No rust or corrosion on the body.",
                            FuelId = 2,
                            GearsTypeId = 1,
                            Horsepower = 190,
                            ImageUrl = "http://localhost:5001/images/vans/Mercedes-BenzSprinter.jpg",
                            Mileage = 437634,
                            Model = "Sprinter",
                            Price = 33300,
                            SellerId = 1,
                            VanCategoryId = 5,
                            Year = 2015
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Ford",
                            Color = "White",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 19, 165, DateTimeKind.Local).AddTicks(8848),
                            Description = "Excellent condition. Brought to one's own motion.",
                            FuelId = 2,
                            GearsTypeId = 1,
                            Horsepower = 125,
                            ImageUrl = "http://localhost:5001/images/vans/FordTransit.jpg",
                            Mileage = 186000,
                            Model = "Transit 2.2TDCI",
                            Price = 18800,
                            SellerId = 1,
                            VanCategoryId = 2,
                            Year = 2016
                        },
                        new
                        {
                            Id = 3,
                            Brand = "VW",
                            Color = "Black",
                            DateAd = new DateTime(2024, 3, 20, 20, 16, 19, 165, DateTimeKind.Local).AddTicks(8859),
                            Description = "The van was imported from Germany in good technical and visual condition.",
                            FuelId = 2,
                            GearsTypeId = 1,
                            Horsepower = 131,
                            ImageUrl = "http://localhost:5001/images/vans/VWMultivan.jpg",
                            Mileage = 223000,
                            Model = "Multivan 2.5TDI",
                            Price = 18999,
                            SellerId = 1,
                            VanCategoryId = 5,
                            Year = 2005
                        });
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.VanCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Van category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Van category name");

                    b.HasKey("Id");

                    b.ToTable("VanCategories");

                    b.HasComment("Van category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Passenger"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cargo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Passenger-Cargo"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bus"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Car transporter"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Car", b =>
                {
                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.CarCategory", "CarCategory")
                        .WithMany("Cars")
                        .HasForeignKey("CarCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.Fuel", "Fuel")
                        .WithMany("Cars")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.GearsType", "GearsType")
                        .WithMany("Cars")
                        .HasForeignKey("GearsTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.Seller", "Seller")
                        .WithMany("Cars")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarCategory");

                    b.Navigation("Fuel");

                    b.Navigation("GearsType");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Motorcycle", b =>
                {
                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.Fuel", "Fuel")
                        .WithMany("Motorcycles")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.GearsType", "GearsType")
                        .WithMany("Motorcycles")
                        .HasForeignKey("GearsTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.MotorcycleCategory", "MotorcycleCategory")
                        .WithMany("Motorcycles")
                        .HasForeignKey("MotorcycleCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.Seller", "Seller")
                        .WithMany("Motorcycles")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fuel");

                    b.Navigation("GearsType");

                    b.Navigation("MotorcycleCategory");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Seller", b =>
                {
                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.TypeSeller", "TypeSeller")
                        .WithMany("Sellers")
                        .HasForeignKey("TypeSellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeSeller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Truck", b =>
                {
                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.Fuel", "Fuel")
                        .WithMany("Trucks")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.GearsType", "GearsType")
                        .WithMany("Trucks")
                        .HasForeignKey("GearsTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.Seller", "Seller")
                        .WithMany("Trucks")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.TruckCategory", "TruckCategory")
                        .WithMany("Trucks")
                        .HasForeignKey("TruckCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fuel");

                    b.Navigation("GearsType");

                    b.Navigation("Seller");

                    b.Navigation("TruckCategory");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Van", b =>
                {
                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.Fuel", "Fuel")
                        .WithMany("Vans")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.GearsType", "GearsType")
                        .WithMany("Vans")
                        .HasForeignKey("GearsTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.Seller", "Seller")
                        .WithMany("Vans")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineVehiclesSales.Infrastructure.Data.Models.VanCategory", "VanCategory")
                        .WithMany("Vans")
                        .HasForeignKey("VanCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fuel");

                    b.Navigation("GearsType");

                    b.Navigation("Seller");

                    b.Navigation("VanCategory");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Fuel", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Motorcycles");

                    b.Navigation("Trucks");

                    b.Navigation("Vans");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.GearsType", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Motorcycles");

                    b.Navigation("Trucks");

                    b.Navigation("Vans");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.MotorcycleCategory", b =>
                {
                    b.Navigation("Motorcycles");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.Seller", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Motorcycles");

                    b.Navigation("Trucks");

                    b.Navigation("Vans");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.TruckCategory", b =>
                {
                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.TypeSeller", b =>
                {
                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("OnlineVehiclesSales.Infrastructure.Data.Models.VanCategory", b =>
                {
                    b.Navigation("Vans");
                });
#pragma warning restore 612, 618
        }
    }
}
